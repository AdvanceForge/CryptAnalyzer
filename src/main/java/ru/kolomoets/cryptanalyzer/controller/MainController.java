package ru.kolomoets.cryptanalyzer.controller;

import ru.kolomoets.cryptanalyzer.core.BruteForce;
import ru.kolomoets.cryptanalyzer.core.CaesarCipher;
import ru.kolomoets.cryptanalyzer.core.StatisticalAnalyzer;
import ru.kolomoets.cryptanalyzer.in_out.FileService;
import ru.kolomoets.cryptanalyzer.util.Alphabet;

import java.nio.file.Path;
import java.util.Scanner;

public class MainController {

    private final Scanner scanner = new Scanner(System.in);

    public void run()  {

        System.out.println("–ö—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞—Ä–æ—Ä –∑–∞–ø—É—â–µ–Ω\n");

        boolean running = true;
        while (running) {

            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã");
            System.out.println("0 - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
            System.out.println("1 - —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ");
            System.out.println("2 - –¥–µ—à–∏–≤—Ä–æ–≤–∞–Ω–∏–µ (—Å –∫–ª—é—á–æ–º)");
            System.out.println("3 - –≤–∑–ª–æ–º (brute force)");
            System.out.println("4 - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑");

            System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã");
            String command = scanner.nextLine();

            switch (command) {
                case "0" -> {
                    System.out.println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                    running = false;
                }
                case "1" -> handleEncryption();
                case "2" -> handleDecryption();
                case "3" -> handleBruteForce();
                case "4" -> handleStatisticalAnalyzer();
                default -> System.err.println("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
            System.out.println("\n");
        }
    }

    public void encrypt(String inputPath, String outputPath, int key) {
        // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        String text = FileService.readFile(inputPath);
        // –®–∏—Ñ—Ä—É–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è –∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        String encrypted = CaesarCipher.encrypt(text, key);
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        FileService.writeFile(outputPath, encrypted);
    }

    public void decrypt(String inputPath, String outputPath, int key) {
        String text = FileService.readFile(inputPath);
        String decrypted = CaesarCipher.decrypt(text, key);
        FileService.writeFile(outputPath, decrypted);
    }

    public void bruteForce(String inputPath, String outputPath) {
        String text = FileService.readFile(inputPath);
        String decrypted = BruteForce.bruteForceDecrypt(text);
        FileService.writeFile(outputPath, decrypted);
    }

    public void statisticalAnalyze(String inputPath, String outputPath) {
        String text = FileService.readFile(inputPath);
        int key = StatisticalAnalyzer.findProbableKey(text); // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á
        System.out.println("–ü–æ–¥–æ–±—Ä–∞–Ω –∫–ª—é—á: " + key); // –í—ã–≤–æ–¥–∏–º –∫–ª—é—á –≤ –∫–æ–Ω—Å–æ–ª—å
        String decrypted = CaesarCipher.decrypt(text, key);
        String result = "[KEY FOUND: " + key + "]\n\n" + decrypted;
        FileService.writeFile(outputPath, result);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    private void handleEncryption() {

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É: ");
        String inputPath = scanner.nextLine();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        Path path = Path.of(inputPath);
        String parentDir = path.getParent() != null ? path.getParent().toString() : "."; // –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è encrypt.txt): ");
        String outputPath = scanner.nextLine();

        // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –≤–≤–µ–¥—ë–Ω, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª encrypt.txt –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (outputPath.isBlank()) {
            outputPath = Path.of(parentDir, "encrypt.txt").toString();
        }

        System.out.print("üóùÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ): ");
        int key = Integer.parseInt(scanner.nextLine());
        if (isValidKey(key)) {
            encrypt(inputPath, outputPath, key);
            System.out.println("‚úîÔ∏è –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤: " + outputPath);
        }

    }

    private void handleDecryption() {

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É: ");
        String inputPath = scanner.nextLine();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        Path path = Path.of(inputPath);
        String parentDir = path.getParent() != null ? path.getParent().toString() : "."; // –µ—Å–ª–∏ —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è decrypt.txt): ");
        String outputPath = scanner.nextLine();

        // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –≤–≤–µ–¥—ë–Ω, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª decrypt.txt –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (outputPath.isBlank()) {
            outputPath = Path.of(parentDir, "decrypt.txt").toString();
        }

        System.out.print("üóùÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ): ");
        int key = Integer.parseInt(scanner.nextLine());
        if (isValidKey(key)) {
            decrypt(inputPath, outputPath, key);
            System.out.println("‚úîÔ∏è –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤: " + outputPath);
        }

    }

    private void handleBruteForce() {

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: ");
        String inputPath = scanner.nextLine();

        Path path = Path.of(inputPath);
        String parentDir = path.getParent() != null ? path.getParent().toString() : ".";

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è brute_force.txt): ");
        String outputPath = scanner.nextLine();
        if (outputPath.isBlank()) {
            outputPath = Path.of(parentDir, "brute_force.txt").toString();
        }
        bruteForce(inputPath, outputPath);
        System.out.println("‚úîÔ∏è Brute force –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤: " + outputPath);
    }

    private void handleStatisticalAnalyzer() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: ");
        String inputPath = scanner.nextLine();

        Path path = Path.of(inputPath);
        String parentDir = path.getParent() != null ? path.getParent().toString() : ".";

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è stat_analyze.txt): ");
        String outputPath = scanner.nextLine();
        if (outputPath.isBlank()) {
            outputPath = Path.of(parentDir, "stat_analyze.txt").toString();
        }
        statisticalAnalyze(inputPath, outputPath);
        System.out.println("‚úîÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤: " + outputPath);
    }

    private static boolean isValidKey(int key) {
        int maxAlphabetSize = Alphabet.getMaxAlphabetSize();
        if (key <= 0 || key >= maxAlphabetSize) {
            System.out.println("–û—à–∏–±–∫–∞: –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ " + (maxAlphabetSize - 1));
            return false;
        }
        return true;
    }
}
